{"version":3,"file":"index.umd.js","sources":["../src/helpers.js","../src/list.js","../src/enumerable.js","../index.ts"],"sourcesContent":["/**\n * Checks if the argument passed is an object\n */\nexport const isObj = (x) => !!x && typeof x === 'object';\n/**\n * Determine if two objects are equal\n */\nexport const equal = (a, b) => Object.entries(a).every(([key, val]) => (isObj(val) ? equal(b[key], val) : b[key] === val));\n/**\n * Creates a function that negates the result of the predicate\n */\nexport const negate = (predicate) => (...args) => !predicate(...args);\n/**\n * Comparer helpers\n */\nexport const composeComparers = (previousComparer, currentComparer) => (a, b) => previousComparer(a, b) || currentComparer(a, b);\nexport const keyComparer = (_keySelector, descending) => (a, b) => {\n    const sortKeyA = _keySelector(a);\n    const sortKeyB = _keySelector(b);\n    if (sortKeyA > sortKeyB) {\n        return !descending ? 1 : -1;\n    }\n    else if (sortKeyA < sortKeyB) {\n        return !descending ? -1 : 1;\n    }\n    else {\n        return 0;\n    }\n};\n","import { composeComparers, negate, isObj, equal, keyComparer } from './helpers';\nclass List {\n    /**\n     * Defaults the elements of the list\n     */\n    constructor(elements = []) {\n        this._elements = elements;\n    }\n    /**\n     * Adds an object to the end of the List<T>.\n     */\n    Add(element) {\n        this._elements.push(element);\n    }\n    /**\n     * Adds the elements of the specified collection to the end of the List<T>.\n     */\n    AddRange(elements) {\n        this._elements.push(...elements);\n    }\n    /**\n     * Applies an accumulator function over a sequence.\n     */\n    Aggregate(accumulator, initialValue) {\n        return this._elements.reduce(accumulator, initialValue);\n    }\n    /**\n     * Determines whether all elements of a sequence satisfy a condition.\n     */\n    All(predicate) {\n        return this._elements.every(predicate);\n    }\n    Any(predicate) {\n        return predicate\n            ? this._elements.some(predicate)\n            : this._elements.length > 0;\n    }\n    Average(transform) {\n        return this.Sum(transform) / this.Count(transform);\n    }\n    /**\n     * Casts the elements of a sequence to the specified type.\n     */\n    Cast() {\n        return new List(this._elements);\n    }\n    /**\n     * Concatenates two sequences.\n     */\n    Concat(list) {\n        return new List(this._elements.concat(list.ToArray()));\n    }\n    /**\n     * Determines whether an element is in the List<T>.\n     */\n    Contains(element) {\n        return this._elements.some(x => x === element);\n    }\n    Count(predicate) {\n        return predicate ? this.Where(predicate).Count() : this._elements.length;\n    }\n    /**\n     * Returns the elements of the specified sequence or the type parameter's default value\n     * in a singleton collection if the sequence is empty.\n     */\n    DefaultIfEmpty(defaultValue) {\n        return this.Count() ? this : new List([defaultValue]);\n    }\n    /**\n     * Returns distinct elements from a sequence by using the default equality comparer to compare values.\n     */\n    Distinct() {\n        return this.Where((value, index, iter) => (isObj(value)\n            ? iter.findIndex(obj => equal(obj, value))\n            : iter.indexOf(value)) === index);\n    }\n    /**\n     * Returns distinct elements from a sequence according to specified key selector.\n     */\n    DistinctBy(keySelector) {\n        const groups = this.GroupBy(keySelector);\n        return Object.keys(groups).reduce((res, key) => {\n            res.Add(groups[key][0]);\n            return res;\n        }, new List());\n    }\n    /**\n     * Returns the element at a specified index in a sequence.\n     */\n    ElementAt(index) {\n        if (index < this.Count() && index >= 0) {\n            return this._elements[index];\n        }\n        else {\n            const MSG = 'ArgumentOutOfRangeException: index is less than 0 or greater than or equal to the number of elements in source.';\n            throw new Error(MSG);\n        }\n    }\n    /**\n     * Returns the element at a specified index in a sequence or a default value if the index is out of range.\n     */\n    ElementAtOrDefault(index) {\n        return this.ElementAt(index) !== undefined && this.ElementAt(index);\n    }\n    /**\n     * Produces the set difference of two sequences by using the default equality comparer to compare values.\n     */\n    Except(source) {\n        return this.Where(x => !source.Contains(x));\n    }\n    First(predicate) {\n        if (this.Count()) {\n            return predicate ? this.Where(predicate).First() : this._elements[0];\n        }\n        else {\n            throw new Error('InvalidOperationException: The source sequence is empty.');\n        }\n    }\n    FirstOrDefault(predicate) {\n        return this.Count(predicate) ? this.First(predicate) : undefined;\n    }\n    /**\n     * Performs the specified action on each element of the List<T>.\n     */\n    ForEach(action) {\n        return this._elements.forEach(action);\n    }\n    /**\n     * Groups the elements of a sequence according to a specified key selector function.\n     */\n    GroupBy(grouper, mapper) {\n        const initialValue = {};\n        if (!mapper) {\n            mapper = val => val;\n        }\n        return this.Aggregate((ac, v) => {\n            const key = grouper(v);\n            const existingGroup = ac[key];\n            const mappedValue = mapper(v);\n            if (existingGroup) {\n                existingGroup.push(mappedValue);\n            }\n            else {\n                ac[key] = [mappedValue];\n            }\n            return ac;\n        }, initialValue);\n    }\n    /**\n     * Correlates the elements of two sequences based on equality of keys and groups the results.\n     * The default equality comparer is used to compare keys.\n     */\n    GroupJoin(list, key1, key2, result) {\n        return this.Select(x => result(x, list.Where(z => key1(x) === key2(z))));\n    }\n    /**\n     * Returns the index of the first occurence of an element in the List.\n     */\n    IndexOf(element) {\n        return this._elements.indexOf(element);\n    }\n    /**\n     * Inserts an element into the List<T> at the specified index.\n     */\n    Insert(index, element) {\n        if (index < 0 || index > this._elements.length) {\n            throw new Error('Index is out of range.');\n        }\n        this._elements.splice(index, 0, element);\n    }\n    /**\n     * Produces the set intersection of two sequences by using the default equality comparer to compare values.\n     */\n    Intersect(source) {\n        return this.Where(x => source.Contains(x));\n    }\n    /**\n     * Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.\n     */\n    Join(list, key1, key2, result) {\n        return this.SelectMany(x => list.Where(y => key2(y) === key1(x)).Select(z => result(x, z)));\n    }\n    Last(predicate) {\n        if (this.Count()) {\n            return predicate\n                ? this.Where(predicate).Last()\n                : this._elements[this.Count() - 1];\n        }\n        else {\n            throw Error('InvalidOperationException: The source sequence is empty.');\n        }\n    }\n    LastOrDefault(predicate) {\n        return this.Count(predicate) ? this.Last(predicate) : undefined;\n    }\n    Max(selector) {\n        const id = x => x;\n        return Math.max(...this._elements.map(selector || id));\n    }\n    Min(selector) {\n        const id = x => x;\n        return Math.min(...this._elements.map(selector || id));\n    }\n    /**\n     * Filters the elements of a sequence based on a specified type.\n     */\n    OfType(type) {\n        let typeName;\n        switch (type) {\n            case Number:\n                typeName = typeof 0;\n                break;\n            case String:\n                typeName = typeof '';\n                break;\n            case Boolean:\n                typeName = typeof true;\n                break;\n            case Function:\n                typeName = typeof function () { }; // tslint:disable-line no-empty\n                break;\n            default:\n                typeName = null;\n                break;\n        }\n        return typeName === null\n            ? this.Where(x => x instanceof type).Cast()\n            : this.Where(x => typeof x === typeName).Cast();\n    }\n    /**\n     * Sorts the elements of a sequence in ascending order according to a key.\n     */\n    OrderBy(keySelector, comparer = keyComparer(keySelector, false)) {\n        return new OrderedList(this._elements, comparer);\n    }\n    /**\n     * Sorts the elements of a sequence in descending order according to a key.\n     */\n    OrderByDescending(keySelector, comparer = keyComparer(keySelector, true)) {\n        return new OrderedList(this._elements, comparer);\n    }\n    /**\n     * Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.\n     */\n    ThenBy(keySelector) {\n        return this.OrderBy(keySelector);\n    }\n    /**\n     * Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.\n     */\n    ThenByDescending(keySelector) {\n        return this.OrderByDescending(keySelector);\n    }\n    /**\n     * Removes the first occurrence of a specific object from the List<T>.\n     */\n    Remove(element) {\n        return this.IndexOf(element) !== -1\n            ? (this.RemoveAt(this.IndexOf(element)), true)\n            : false;\n    }\n    /**\n     * Removes all the elements that match the conditions defined by the specified predicate.\n     */\n    RemoveAll(predicate) {\n        return this.Where(negate(predicate));\n    }\n    /**\n     * Removes the element at the specified index of the List<T>.\n     */\n    RemoveAt(index) {\n        this._elements.splice(index, 1);\n    }\n    /**\n     * Reverses the order of the elements in the entire List<T>.\n     */\n    Reverse() {\n        return new List(this._elements.reverse());\n    }\n    /**\n     * Projects each element of a sequence into a new form.\n     */\n    Select(selector) {\n        return new List(this._elements.map(selector));\n    }\n    /**\n     * Projects each element of a sequence to a List<any> and flattens the resulting sequences into one sequence.\n     */\n    SelectMany(selector) {\n        return this.Aggregate((ac, _, i) => (ac.AddRange(this.Select(selector)\n            .ElementAt(i)\n            .ToArray()),\n            ac), new List());\n    }\n    /**\n     * Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.\n     */\n    SequenceEqual(list) {\n        return !!this._elements.reduce((x, y, z) => (list._elements[z] === y ? x : undefined));\n    }\n    /**\n     * Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.\n     */\n    Single(predicate) {\n        if (this.Count(predicate) !== 1) {\n            throw new Error('The collection does not contain exactly one element.');\n        }\n        else {\n            return this.First(predicate);\n        }\n    }\n    /**\n     * Returns the only element of a sequence, or a default value if the sequence is empty;\n     * this method throws an exception if there is more than one element in the sequence.\n     */\n    SingleOrDefault(predicate) {\n        return this.Count(predicate) ? this.Single(predicate) : undefined;\n    }\n    /**\n     * Bypasses a specified number of elements in a sequence and then returns the remaining elements.\n     */\n    Skip(amount) {\n        return new List(this._elements.slice(Math.max(0, amount)));\n    }\n    /**\n     * Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\n     */\n    SkipWhile(predicate) {\n        return this.Skip(this.Aggregate(ac => (predicate(this.ElementAt(ac)) ? ++ac : ac), 0));\n    }\n    Sum(transform) {\n        return transform\n            ? this.Select(transform).Sum()\n            : this.Aggregate((ac, v) => (ac += +v), 0);\n    }\n    /**\n     * Returns a specified number of contiguous elements from the start of a sequence.\n     */\n    Take(amount) {\n        return new List(this._elements.slice(0, Math.max(0, amount)));\n    }\n    /**\n     * Returns elements from a sequence as long as a specified condition is true.\n     */\n    TakeWhile(predicate) {\n        return this.Take(this.Aggregate(ac => (predicate(this.ElementAt(ac)) ? ++ac : ac), 0));\n    }\n    /**\n     * Copies the elements of the List<T> to a new array.\n     */\n    ToArray() {\n        return this._elements;\n    }\n    ToDictionary(key, value) {\n        return this.Aggregate((dicc, v, i) => {\n            dicc[this.Select(key)\n                .ElementAt(i)\n                .toString()] = value ? this.Select(value).ElementAt(i) : v;\n            dicc.Add({\n                Key: this.Select(key).ElementAt(i),\n                Value: value ? this.Select(value).ElementAt(i) : v\n            });\n            return dicc;\n        }, new List());\n    }\n    /**\n     * Creates a List<T> from an Enumerable.List<T>.\n     */\n    ToList() {\n        return this;\n    }\n    /**\n     * Creates a Lookup<TKey, TElement> from an IEnumerable<T> according to specified key selector and element selector functions.\n     */\n    ToLookup(keySelector, elementSelector) {\n        return this.GroupBy(keySelector, elementSelector);\n    }\n    /**\n     * Produces the set union of two sequences by using the default equality comparer.\n     */\n    Union(list) {\n        return this.Concat(list).Distinct();\n    }\n    /**\n     * Filters a sequence of values based on a predicate.\n     */\n    Where(predicate) {\n        return new List(this._elements.filter(predicate));\n    }\n    /**\n     * Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.\n     */\n    Zip(list, result) {\n        return list.Count() < this.Count()\n            ? list.Select((x, y) => result(this.ElementAt(y), x))\n            : this.Select((x, y) => result(x, list.ElementAt(y)));\n    }\n}\n/**\n * Represents a sorted sequence. The methods of this class are implemented by using deferred execution.\n * The immediate return value is an object that stores all the information that is required to perform the action.\n * The query represented by this method is not executed until the object is enumerated either by\n * calling its ToDictionary, ToLookup, ToList or ToArray methods\n */\nclass OrderedList extends List {\n    constructor(elements, _comparer) {\n        super(elements);\n        this._comparer = _comparer;\n        this._elements.sort(this._comparer);\n    }\n    /**\n     * Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.\n     * @override\n     */\n    ThenBy(keySelector) {\n        return new OrderedList(this._elements, composeComparers(this._comparer, keyComparer(keySelector, false)));\n    }\n    /**\n     * Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.\n     * @override\n     */\n    ThenByDescending(keySelector) {\n        return new OrderedList(this._elements, composeComparers(this._comparer, keyComparer(keySelector, true)));\n    }\n}\nexport default List;\n","import List from './list';\nexport default class Enumerable {\n    /**\n     * Generates a sequence of integral numbers within a specified range.\n     */\n    static Range(start, count) {\n        let result = new List();\n        while (count--) {\n            result.Add(start++);\n        }\n        return result;\n    }\n    /**\n     * Generates a sequence that contains one repeated value.\n     */\n    static Repeat(element, count) {\n        let result = new List();\n        while (count--) {\n            result.Add(element);\n        }\n        return result;\n    }\n}\n","/**\n * LinQ to TypeScript\n *\n * Documentation from LinQ .NET specification (https://msdn.microsoft.com/en-us/library/system.linq.enumerable.aspx)\n *\n * Created by Flavio Corpa (@kutyel)\n * Copyright © 2016 Flavio Corpa. All rights reserved.\n *\n */\nexport { default as List } from './src/list'\nexport { default as Enumerable } from './src/enumerable'\n"],"names":["const","isObj","x","equal","a","b","Object","entries","every","val","key","negate","predicate","args","composeComparers","previousComparer","currentComparer","keyComparer","_keySelector","descending","sortKeyA","sortKeyB","List","constructor","elements","_elements","Add","element","push","AddRange","Aggregate","accumulator","initialValue","reduce","All","Any","some","length","Average","transform","Sum","Count","Cast","Concat","list","concat","ToArray","Contains","Where","DefaultIfEmpty","defaultValue","Distinct","value","index","iter","findIndex","obj","indexOf","DistinctBy","keySelector","groups","GroupBy","keys","res","ElementAt","MSG","Error","ElementAtOrDefault","undefined","Except","source","First","FirstOrDefault","ForEach","action","forEach","grouper","mapper","ac","v","existingGroup","mappedValue","GroupJoin","key1","key2","result","Select","z","IndexOf","Insert","splice","Intersect","Join","SelectMany","y","Last","LastOrDefault","Max","selector","id","Math","max","map","Min","min","OfType","type","typeName","Number","String","Boolean","Function","OrderBy","comparer","OrderedList","OrderByDescending","ThenBy","ThenByDescending","Remove","RemoveAt","RemoveAll","Reverse","reverse","_","i","this","SequenceEqual","Single","SingleOrDefault","Skip","amount","slice","SkipWhile","Take","TakeWhile","ToDictionary","dicc","toString","Key","Value","ToList","ToLookup","elementSelector","Union","filter","Zip","_comparer","sort","Enumerable","Range","start","count","Repeat"],"mappings":"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"}